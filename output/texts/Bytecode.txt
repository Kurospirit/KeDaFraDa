Bytecode

Le bytecode (signifiant en anglais, « code octal », en référence à l'octet informatique) est un code intermédiaire entre les instructions machines et le code source, il n'est pas directement exécutable. Le bytecode peut être créé à la volée et résider en mémoire (compilation à la volée, JIT en anglais) ou bien résider dans un fichier, généralement binaire qui représente le programme, tout comme un fichier de code objet produit par un compilateur.
Il est appelé "bytecode" du fait de son format où chaque instruction est codée en binaire.
Puisque c'est un code qui n'est pas exécutable directement par un processeur (à l'exception de certains processeurs gérant le bytecode Java nativement), il est utilisé par les créateurs de langages de programmation en guise de code intermédiaire réduisant la dépendance vis-à-vis du matériel et facilitant son interprétation sur plusieurs architectures.
Certains compilateurs, comme LLVM, et langages de scripts, comme SmallTalk, Java ou certaines implémentations de Ruby (telles que JRuby, Ruby.NET ou SmallRuby) utilisent le "bytecode" comme représentation intermédiaire avant la transformation en code machine vers l'architecture cible (x86, amd64, ARM, MIPS, PowerPC, etc...) 
Certains systèmes, appelés « traducteurs dynamiques » ou « compilateurs à la volée » ("JIT (just-in-time) compilers" en anglais), traduisent le "bytecode" en code machine au fur et à mesure de l’exécution, cela permet d’accélérer l’exécution sur les boucles ou les fonctions appelées plusieurs fois tout en évitant de stocker sur disque ou de transférer via les réseaux des données précompilées. Cette technique est notamment utilisée dans le langage Java et dans les émulateurs de systèmes (ordinateurs ou consoles de jeu par exemple), retranscrivant les instructions d'un langage machine à un autre et plus généralement d'une architecture matérielle à une autre.
Un programme à base de "bytecode" est exécuté par un interpréteur appelé machine virtuelle, car elle exécute le code tout comme un microprocesseur. L'avantage est la portabilité : le même "bytecode" peut être exécuté sur diverses plates-formes ou architectures pour lesquelles un interpréteur existe. Un programme sous forme de "bytecode" peut donc être transmis d'une machine à une autre, et être interprété puis exécuté sans modification de celui-ci par différents types d'architectures matérielles. L'avantage est le même que pour les scripts, qui sont directement interprétés (et non compilés en "bytecode"). Cependant, le "bytecode" est plus concret, plus compact et plus facile à manipuler qu'un script, prévu pour être intelligible par l'homme. Les performances des interpréteurs de "bytecode" sont généralement bien meilleures que celles des interpréteurs de scripts pour ces raisons.
Pour bénéficier de ces avantages, aujourd'hui de nombreux langages interprétés sont en fait compilés en "bytecode" avant d'être exécutés par un interpréteur. C'est le cas par exemple de PHP (lorsqu'il est utilisé pour des applications), de Tcl, de Python. Un programme Java est habituellement transmis sous forme de "bytecode" à une machine hôte qui utilisera une compilation à la volée pour traduire le "bytecode" en code machine avant exécution. Les implémentations actuelles de Perl et de Ruby utilisent non pas du "bytecode", mais une structure en arbre qui se rapproche de la représentation intermédiaire des compilateurs.
Les "p-Codes" diffèrent des "bytecodes" par le codage de leurs opérations, qui peut être de plusieurs octets avec une taille variable, tout comme les "opcodes" de nombreux processeurs. Ils ont un plus haut niveau descriptif, comme « afficher cette chaine de caractères » ou encore « effacer l'écran ». Le BASIC et quelques versions de Pascal utilisent un "p-Code".