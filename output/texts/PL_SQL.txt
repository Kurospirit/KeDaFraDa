PL/SQL

PL/SQL (sigle de Procedural Language / Structured Query Language) est un langage, conçu aux paradigmes procédural et structuré. Il est propriétaire, créé par Oracle et utilisé dans le cadre de bases de données relationnelles. Sa syntaxe générale ressemble à celle des langages Pascal et Ada.
PL/SQL est disponible dans Oracle Database (depuis la version 7), TimesTen In-Memory Database (depuis la version 11.2.1) et IBM DB2 (depuis la version 9.7).
Il permet de combiner des requêtes SQL et des instructions procédurales (boucles, conditions...), dans le but de créer des traitements complexes destinés à être stockés sur le serveur de base de données (objets serveur), comme des procédures stockées ou des déclencheurs.
Les dernières évolutions proposées par Oracle reposent sur un moteur permettant de créer et gérer des objets contenant des méthodes et des propriétés.
À la base, PL/SQL est un langage interprété, mais depuis la version 9i RC1, le code peut être compilé en code machine. Dans la version 9i d'Oracle database, le code est converti en C puis doit être compilé en librairies partagées (DLL sous windows), dans la version 10g le code machine est stocké dans le catalogue et depuis la version 11g il est stocké dans le "tablespace" système après compilation directe.
Comparaison avec les autres bases de données.
MySQL et Mimer SQL proposent un langage analogue dans le principe mais plus limité, le SQL/PSM de la norme SQL:2003, et plusieurs SGBD en utilisent un dérivé (IBM DB2 avec SQL-PL, PostgreSQL avec PL/pgSQL et PL/pgPSM). Quant à Microsoft et Sybase, ils utilisent un concurrent développé par Sybase, le T-SQL nettement plus limité que PL/SQL.
Concepts.
Blocs.
Tout programme PL/SQL doit se présenter sous forme de blocs. Voici la forme générale d'un bloc.
Un bloc PL/SQL comprend d'abord une partie dédiée à la définition de toutes les variables employées dans le bloc. Elle commence par l'instruction "DECLARE" et est facultative. La section principale commence avec l'instruction "BEGIN". Elle contient les instructions du programme. Si une variable est utilisée dans cette section alors qu'elle n'a pas été déclarée dans la section de déclaration, le compilateur générera une erreur. Enfin, la dernière section est appelée en cas d'erreur dans la section précédente. Elle commence par l'instruction "EXCEPTION" et on y traite l'ensemble des exceptions levées dans la section principale.
Structure du code.
PL/SQL permet de grouper les instructions dans des procédures et des fonctions, ces termes ont la même signification qu'en Pascal : une fonction est un bloc de code prenant des paramètres et qui effectue des traitements pour obtenir un résultat retourné, une procédure recouvre la même notion sauf qu'une procédure ne retourne pas de résultat. Les arguments passés aux procédures et fonctions peuvent lui être donnés en lecture seule ("IN"), en écriture ("OUT") ou en lecture-écriture ("IN OUT") ; le développeur peut également choisir le passage par valeur (comportement normal) ou par référence ("NO COPY").
Des fonctions et procédures peuvent être regroupées dans des unités nommées paquetages, elles sont alors accessibles sous le même espace de noms. D'une manière similaire aux modules de Pascal, la création d'un paquetage requiert l'écriture d'une spécification exposant le prototype des fonctions et procédures du paquetage, ainsi que des variables et types publics. En second lieu, l'implémentation du paquetage est faite séparément ; elle contient le code des procédures et fonctions ainsi que la déclaration d'éléments privés.
La version 8i a introduit le concept d'objet et les implémentations depuis la version 9i supportent la programmation orientée-objet avec notamment l'héritage. Une classe PL/SQL est décrite comme un type. Elle a une structure analogue à celle d'un package PL/SQL : d'abord la déclaration des méthodes, ensuite leur implémentation dans le "body".
Variables.
Les premiers types de variables à disposition sont les types SQL supportés par le serveur Oracle ("INTEGER", "VARCHAR", ...), mais il est possible de définir des types personnalisés.