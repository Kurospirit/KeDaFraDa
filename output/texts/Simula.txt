Simula

Simula () a été créé en 1962 sous la dénomination Simula I par Ole-Johan Dahl et Kristen Nygaard à partir d'Algol 60. Le langage évolua en 1967 sous le nom de Simula 67 en implantant le premier le modèle de classe de Hoare (Record Class, Hoare 1965). Il est donc le premier langage à classes et donc le père de tous les langages à classes tel que Smalltalk, C++, Java, ou encore Eiffel. Il inspira Dan Ingalls dans la conception de Smalltalk qui introduisit la programmation orienté objet. C'est la raison pour laquelle Simula 67 est souvent considéré à tort comme le premier langage orienté objet alors que ce paradigme est introduit bien après Simula 67 dans les années 1970 par Alan Kay.
Historique.
Simula a été développé dans les années 1960 au d'Oslo, initialement par Ole-Johan Dahl et Kristen Nygaard. Syntaxiquement parlant, c'est un sur-ensemble d'Algol, qui ajoute à celui-ci les concepts, aujourd'hui familiers, des langages à classes comme C++ Java ou autres et de la simulation à événements discrets.
Simula n'a jamais été un simple langage universitaire, puisqu'il a été utilisé pour des applications industrielles , mais son influence historique est considérée comme plus importante que les applications qui auraient pu être développées avec lui.
Par Simula on entend généralement Simula-67, c'est-à-dire la version de 1967, alors que la version précédente datait de 1962 : Simula .
Simulation discrète.
Comme son nom l'indique, en plus de constituer un langage de programmation généraliste, Simula a été conçu de façon à contenir des bibliothèques de classes offrant un support de concepts spécifiques à la simulation à événements discrets. La classe , héritant de "Simulation" permettait ainsi à l'utilisateur d'hériter pour ses propres classes de simulation du comportement de base d'un processus pouvant s'exécuter en mode dit « "quasi-parallèle" », à l'aide du concept de coroutine.
Une coroutine est une routine à plusieurs points de sortie et qui, à chaque ré-entrée du flot d'exécution dans celle-ci lors d'un appel à l'instruction Resume, reprend son exécution à la dernière instruction où le flot l'avait précédemment quitté lors d'un appel à l'instruction Detach. Le point d'exécution est stocké dans le LSC : .
Pour clarifier le propos, le programme suivant produirait l'affichage indiqué plus bas : 
Affichage :
La bibliothèque de simulation discrète permettait de gérer la file des processus au moyen d'instructions dédiées (Activate, Passivate, Hold, etc.)
Programmation objet.
La plupart des constructions qui permettront plus tard la réalisation des concepts principaux de la programmation orientée objet sont d'ores et déjà présents dans Simula 67 :
Cette liste succincte permet de prendre conscience de la percée conceptuelle opérée par Simula en 1967 dans le domaine des langages impératifs structurés.
Malheureusement, les auteurs de Simula apportèrent une certaine confusion dans le monde de la programmation orientée objet. Avec l'apparition de ce nouveau paradigme avec Smalltalk, Ole Johan Dahl et Kristen Nygaard, changèrent les dénominations utilisées dans Simula pour se conformer aux concepts véhiculés dans Smalltalk (classes d'objets, objets, attributs, méthodes, etc.) et déclarèrent que Simula 67 fut en fait le premier langage orienté objet. Pourtant, l'approche utilisée dans Simula 67 n'est pas celle définie par Alan Kay, l'auteur de la programmation orientée.